# #  Базовые типы: численные типы!!!!
# num = 13
# print(num)

# num = 0
# print(num)

# num = -10
# print(num)
# # Для наглядности, можно задавать различные числа и ноль и отриц.
# num = 100_000_000 # Для удобства длинные числа можно расписывать так
# print(num) #100000000

# # Встроенная функция type
# num = 13
# print(type(num)) # <class 'int'> целое число

# #  Вещественные числа(float) числа с плавающей точкой

# num = 13.4 # То же самое для 0 и -числа
# print(num)

# # 1.5 умножить на 10 в степени 2
# num = 1.5e2
# print(num) # 150


# # Конвертация типов:
# num = 150.2
# print(type(num)) # <class 'float'>
# num = int(num) # и также num = float(num)

# # decimal позволяет работать с вещественными числами с фиксированной точностью
# # fractions позволяет работать с рациональными числами (дробями)

# # можно присваивать значения следующим образом (Пример для нахождения длины гипотенузы в треугльнике, с декартовой системой координат):
# x1, y1 = 0, 0
# x2 = 3
# y2 = 4

# distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5

# # Можно поменять местами значения двух переменных
# a = 100
# b = 100
# a, b = b, a


# # Базовые типы: логический тип!!!!

# # Логическое "и"
# x, y = True, False
# print(x and y)  # False why??

# # "или"
# x, y = True, False
# print(x or y)  # True why?
# # Он говорил, что выполняя под "и" он доходит до первого нелогичного выражения и стопорится и выписывает его

# # Логическое отрицание
# y = False
# print(not y) # True

# # Составные логические выражения
# x, y, z = True, False, True
# result = x and y or z
# print(result) # True

# # Определить високосный год или нет?
# # Год является високосным, если он кратен 4, но при этом не равен 100, либо кратен 400
# year = 2017
# is_leap = year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)
# print(is_leap) #false
# # Или
# import calendar
# print(calendar.isleap(1980))


# # Базовые типы: строки и байтовые строки!!!!
# # Экранирование символов
# example_string = "Курс про \"Python\" на \"Coursera\""
# print(example_string)

# # ''' Сюда можно вставить много текста
# # и, например, писать его в несколько строк
# # Что б было удобнее. Так получается при тройных кавычках
# # '''

# # Строки можно умножать

# # Срезы строк [start:stop:step]
# example_string = 'Курс про Python на Coursera'
# example_string[9:] # or [9:15] или с отрицательными, значит начнёт отсчёт с конца
# # Что б степ только записать, то [::2]
# example_string = '0123456789'
# example_string[::2] # Например, что б выписать только чётные числа

# # Инвертация строки через срез при помощи step от среза [::-1]
# example_string = 'Москва'
# example_string[::-1]

# # У строк есть методы
# # если определим строку и присвоим переменой, то у этой строки можем вызывать различные методы
# quote = """Болтовня ничего не стоит. Покажи мне код.
# Linus Torvalds
# """
# # qute.count('o') # позволяет найти количество вхождений буквы О в строку

# "москва".capitalize() # позволяет сделать первую букву в строке заглавной -> 'Москва'

# "2017".isdigit() # Позволяет проверить является ли строка числом. И возвращает буллинг True/False
# # Методы строк!!

# # Оператор in позволяет проверить наличие подстроки в строке
# "3.14" in "Число Пи = 3.1415926" # True
# 'Алексей' in 'Александр Пушкин' # False

# # Оператор for .. in позволяет итерироваться по строке (итерация - взятие каждого следующего элемента поочереди):
# example_string = 'Привет'
# for letter in example_string:
#     # print('Буква', letter)

# # Форматирование строк!!!!
# # 1-й способ # подставление %s для строки %d для числа
# template = '%s - главное достоинство программиста. (%s)'
# template % ("Лень", "Larry Wall")

# # 2-й способ # format {} - видимо плейсхолдер, а формат значения подставляет в плейсхолдеры. Не обязательно указывать тип внутри них, питон сам порешает всё
# '{} не лгут, но {} пользуются формулами. ({})'.format(
#     "Цифры", "лжецы", "Robert A. Heinlein"
# )
# # ещё. Когда есть имена в плейсхолдерах. А в функции формат мы передаём именнованные аргуметы по имени, совпадающему с именем плейсхолдера
# '{num} Кб должно хватить для любых задач. ({author})',format(
#     num=640, author="Bill Gates"
# )

# # Самый удобный вид форматирования f-строки (Python>= 3.6)
# subject = 'оптимизация'
# author = 'Donald Knutch'
# f'Преждевременная {subject} - корень всех зло. ({author})'


# # Модификаторы форматирования!! позволяет скзаать языку, как я хочу то, или иное значение подставлять, в каком виде его вывести
# num = 8
# f'Binary: {num:#b}' # 'Binary: 0b1000'

# num = 2 / 3
# print(num)
# print(f'{num:.3f}') # 0.666666(6) -> 0.667


# # Встроенная функция input()
# name =  input("Введи своё имя: ")
# f'Привет, {name}!' # Привет, имя!

# # Базовые типы: объект None
# income = 0
# if not income:
#     print('Ничего не заработали')

# income = None
# if income is None:
#     print('Ещё не начинали продавать')
# elif not income: # если в переменоной что-то будет, например 0
#     print('Ничего не заработали')


# # Конструкции управления потоком
# # if - проверка условия
# company = 'my.com'
# if 'my' in company:
#     print('Условие выполнено!')

# # Сложное условие
# company = 'example.net'
# if 'my' in company or company.endswith('.net'):
#     print("Условие выполнено")

#  Оператор elif используется, когда нужно проверить несколько разных условий друг за другом


# #  Аналог тенарного оператора
# score_1 = 5
# score_2 = 0
# winner = "Argentina" if score_1 > score_2 else "Jamaica"
# print(winner)

# Оператор while позволяет выполнять блок кода до тех пор, пока выполняется условие

# i = 0
# while i < 100:
#     i += 1
# print(i) # Ответ 100. Типа будут к i прибавлять единичку, пока она меньше 100

# Когда следует проитерироваться по какой-нибудь последовательности
# Цикл for, объект range
# for i in range(3):
#     print(i)
# """
# 0
# 1
# 2
# """

# # Получить сумму чисел от нуля до ста # Тут к result прибавляется каждое число, которое будет взято в функции for i in range(). 
# result = 0
# for i in range(5):
#     result += i
# print(result)

# range имеет 3 аргумента (начало, конец, шаг)
for i in range(1, 10, 2): # Для обратного порядка шаг задать -1
    print(i)
    
# pass определяет пустой блок, который ничего не делает

# # Оператор break позволяет выйти из цикла досрочно
# result = 0
# while True:
#     result += 1
#     if result >= 100:
#         break
    
# print (result) # 100

# for i in range(10):
#     if i == 5:
#         break
#     print(i)
    
# # Оператор continue используется, когда в блоке цикла нужно перейти к следующей итерации без выполнения оставшихся инструкций в блоке
# # Сложить все числа от 0 до 9 и сложить только чётные числа:
# result = 0
# for i in range(10):
#     in i % 2 != 0:
#         continue
#     result += i
# print(result)

